#!/usr/bin/python3

import os
import re
import sys
import glob
import shutil
import subprocess
import argparse


def openbmc_path():
    curr = os.path.abspath(__file__)
    openbmc = os.path.dirname(curr) + "/.."
    return os.path.abspath(openbmc)


def recipes_with_ptest():
    openbmc = openbmc_path()
    avoidlist = ["qemux86-image.bb", "ptest-meson-crosstarget-native_0.1.bb", "rsyslog_8.34.0.bb"]

    def contains_ptest(f):
        with open(f) as fd:
            if "ptest" in fd.read():
                return True
        return False

    def recipe_name(recipe):
        m = re.match(r"(.+)_.+\.bb$", recipe)
        return m[1]

    dirs = [
        f
        for f in glob.glob(f"{openbmc}/*")
        if os.path.isdir(f)
        and os.path.basename(f) != "yocto"
        and not os.path.basename(f).startswith("build")
    ]
    recipes = set()
    total_recipes = 0
    for d in dirs:
        for root, _, files in os.walk(d):
            if "meta-backports" in root:
                continue
            for f in files:
                f_full = os.path.join(root, f)
                if f.endswith(".bb"):
                    total_recipes += 1
                    if f not in avoidlist and contains_ptest(f_full):
                        recipes.add(recipe_name(f))
    print(f"Found {total_recipes} recipes of which {len(recipes)} define unit-tests")
    return list(recipes)


def bmc_build(recipes):
    openbmc = openbmc_path()
    recipe_arg = " ".join(recipes)
    build_steps = [
        f"cd {openbmc}",
        "source ./openbmc-init-build-env qemux86 build-qemux86 > /dev/null",
        "sed -i -n '/IMAGE_INSTALL_append/!p' conf/local.conf",
        f'echo IMAGE_INSTALL_append = \\"{recipe_arg}\\" >> conf/local.conf',
        "bitbake -q qemux86-image",
    ]
    build_cmd = "; ".join(build_steps)
    cmd = ["env", "-i", f"HOME={os.environ['HOME']}", "bash", "-l", "-c", build_cmd]
    subprocess.check_call(cmd)
    return openbmc + "/build-qemux86"


def main(args):
    all_recipes = recipes_with_ptest()
    if args.build is None:
        args.build = bmc_build(all_recipes)

    if not os.path.isdir(args.build):
        print(f"{args.build} does not exist")
        sys.exit(-1)
    args.build = os.path.abspath(args.build)
    deploy = args.build + "/tmp/deploy/images/qemux86-64"
    rootfs_zip = deploy + "/qemux86-image-qemux86-64.tar.bz2"
    rootfs_zip = os.path.abspath(rootfs_zip)
    rootfs = deploy + "/rootfs"
    if os.path.isdir(rootfs):
        shutil.rmtree(rootfs)
    os.makedirs(rootfs)
    untar = ["tar", "-xf", rootfs_zip, "-C", rootfs]
    subprocess.check_call(untar)
    cmd = ["unshare", "--mount", "--map-root-user", "chroot", rootfs]
    if args.shell:
        subprocess.check_call(cmd)
    else:
        cmd += ["ptest-runner"]
        exit_error = False;
        if args.recipes is None or len(args.recipes) == 0:
            cmd += all_recipes
        else:
            cmd += args.recipes
        try:
            out = subprocess.check_output(cmd).decode()
            print(out)
        except subprocess.CalledProcessError as e:
            print(e.output.decode())
            if (e.stderr is not None):
                print(e.stderr.decode())
            exit_error = True
        if args.log is not None:
            log = rootfs + "/" + args.log
            with open(log) as f:
                print(f.read())
        if exit_error:
          sys.exit(1)


parser = argparse.ArgumentParser(description="Helper to run unit-tests natively")
parser.add_argument(
    "--build",
    "-b",
    help="Use an existing build directory instead of building one (For debugging)",
    dest="build",
    default=None,
)
parser.add_argument(
    "--shell",
    "-s",
    help="Drops you into a CHROOTed shell of the image (For debugging)",
    dest="shell",
    default=False,
    action="store_true",
)
parser.add_argument(
    "--log",
    "-l",
    help="Print the log file after execution of the test(s)",
    dest="log",
    default=None,
)
parser.add_argument("recipes", nargs="*", help="Recipe(s) to test")
args = parser.parse_args()
main(args)
